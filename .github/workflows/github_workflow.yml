  const fs = require('fs');
    const path = require('path');
    const { execSync } = require('child_process');
    const glob = require('glob');
    
    class CodeAnalyzer {
    constructor() {
    this.tsParser = require('@typescript-eslint/parser');
    this.getParamName = this.getParamName.bind(this);
    }
    
    getChangedFiles() {
    try {
  const output = execSync('git diff --name-only HEAD~1 HEAD', { encoding: 'utf8' });
    return output.split('\n').filter(file =>
    file && (file.endsWith('.ts') || file.endsWith('.js') || file.endsWith('.vue'))
    );
  } catch (error) {
    console.log('Could not get changed files, analyzing all source files');
    return glob.sync('src/**/*.{ts,js}');
  }
  }

    extractFunctions(filePath) {
    try {
    const content = fs.readFileSync(filePath, 'utf8');
    const ast = this.tsParser.parse(content, {
  ecmaVersion: 2020,
  sourceType: 'module',
  ecmaFeatures: { jsx: true },
  loc: true
  });
    
    const functions = [];
    
    const traverse = (node, parent = null) => {
    if (node.type === 'FunctionDeclaration' && node.id) {
    functions.push({
  name: node.id.name,
  type:
